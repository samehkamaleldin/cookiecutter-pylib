# ==============================================================
# = PROJECT METADATA                                           =
# ==============================================================
[tool.poetry]
name        = "{{cookiecutter.project_slug}}"
version     = "{{cookiecutter.version}}"
description = "{{cookiecutter.project_short_description}}"
authors     = ["{{cookiecutter.full_name}} <{{cookiecutter.email}}>"]
# List of packages to be distributed
packages = [
    { include = "{{cookiecutter.project_slug}}", from = "src" },
]
# Other files to be distributed
include = [
  "CHANGELOG.md",
  "CONTRIBUTING.md",
  "LICENSE",
  "README.md",
]

# ==============================================================
# = CLI ENTRY POINTS: SCRIPTS                               =
# ==============================================================
[tool.poetry.scripts]
pylib_exec = '{{cookiecutter.project_slug}}.entry:main'

# ==============================================================
# = PACKAGE DEPENDENCIES                                       =
# ==============================================================
[tool.poetry.dependencies]
python     = "~3.8.13"

# ==============================================================
# = DEVELOP DEPENDENCIES                                       =
# ==============================================================
[tool.poetry.dev-dependencies]
tox        = "^3.24.4"
pytest     = "^7.1.2"
pytest-cov = "^3.0.0"
coverage   = {version = "^6.4.0", extras = ["toml"]}
black      = "^22.6.0"
pre-commit = "^2.20.0"
bandit     = "^1.7.1"
mkdocs     = "^1.3.0"
mkdocs-material = "^8.3.9"
mkdocstrings    = {version = "^0.19.0", extras = ["python"]}

# ==============================================================
# = LINT/TEST CONFIGURATIONS                                   =
# ==============================================================
# ---------------------------------------------------------------
# - Pytest configuratiosn                                       -
# ---------------------------------------------------------------
[tool.pytest.ini_options]
addopts = "-ra --strict-markers"
xfail_strict = true
testpaths = "tests"
filterwarnings = [
    "once::Warning",
    "ignore:::importlib[.*]",
]

# ---------------------------------------------------------------
# - Coverage configurations                                     -
# ---------------------------------------------------------------
[tool.coverage.run]
parallel = true
branch = true
source = ["{{cookiecutter.project_slug}}"]

[tool.coverage.paths]
source = ["src", ".tox/*/site-packages"]

[tool.coverage.report]
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
    # typing-related code
    "^if (False|TYPE_CHECKING):",
    ": \\.\\.\\.$",
    "^ +\\.\\.\\.$",
    "-> ['\"]?NoReturn['\"]?:",
]

# ---------------------------------------------------------------
# - Bandit Security Screening                                   -
# ---------------------------------------------------------------
[tool.bandit]
tests = []
skips = ["B101", "B601"]

[tool.bandit.any_other_function_with_shell_equals_true]
no_shell = [
  "os.execl",
  "os.execle",
  "os.execlp",
  "os.execlpe",
  "os.execv",
  "os.execve",
  "os.execvp",
  "os.execvpe",
  "os.spawnl",
  "os.spawnle",
  "os.spawnlp",
  "os.spawnlpe",
  "os.spawnv",
  "os.spawnve",
  "os.spawnvp",
  "os.spawnvpe",
  "os.startfile"
]
shell = [
  "os.system",
  "os.popen",
  "os.popen2",
  "os.popen3",
  "os.popen4",
  "popen2.popen2",
  "popen2.popen3",
  "popen2.popen4",
  "popen2.Popen3",
  "popen2.Popen4",
  "commands.getoutput",
  "commands.getstatusoutput"
]
subprocess = [
  "subprocess.Popen",
  "subprocess.call",
  "subprocess.check_call",
  "subprocess.check_output"
]

# ==============================================================
# = BLACK CODE FORMATTING                                   =
# ==============================================================
[tool.black]
line-length = 120
target-version = ["py37"]
exclude = '''
/(
    \.git
  |  \.tox
  | \.pytest_cache
  | __pycache__
)/
'''

# ==============================================================
# = PROJECT BUILD INFO                                         =
# ==============================================================
[build-system]
requires      = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
